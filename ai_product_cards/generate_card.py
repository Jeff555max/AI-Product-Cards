
import os
import pandas as pd
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_gigachat.chat_models import GigaChat
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GigaChat –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GIGACHAT_API_KEY = os.getenv("GIGACHAT_API_KEY")
GIGACHAT_CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
GIGACHAT_SCOPE = os.getenv("GIGACHAT_SCOPE")
GIGACHAT_MODEL = os.getenv("GIGACHAT_MODEL", "GigaChat-Pro")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GigaChat-Pro
GIGACHAT_TEMPERATURE = float(os.getenv("GIGACHAT_TEMPERATURE", 0.2))  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
GIGACHAT_TOP_P = float(os.getenv("GIGACHAT_TOP_P", 1))  # Top-p sampling –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –æ—Ç–≤–µ—Ç–æ–≤


def download_yadisk_file(yadisk_url, out_path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ.
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ,
    –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º (chunks) –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏.
    
    Args:
        yadisk_url (str): –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
        out_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    """
    api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download'
    params = {'public_key': yadisk_url}
    r = requests.get(api_url, params=params)
    r.raise_for_status()
    download_url = r.json()['href']
    with requests.get(download_url, stream=True) as f:
        f.raise_for_status()
        with open(out_path, 'wb') as out_file:
            for chunk in f.iter_content(chunk_size=8192):
                out_file.write(chunk)

def load_products():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞.
    
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:
    1 - –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ data/products.csv
    2 - —Å–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
    
    Returns:
        pandas.DataFrame: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
    """
    data_dir = os.path.join(os.path.dirname(__file__), '..', 'data')
    os.makedirs(data_dir, exist_ok=True)
    local_path = os.path.join(data_dir, 'products.csv')
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (products.csv –≤ –ø–∞–ø–∫–µ data)")
    print("2. –°–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ (https://disk.yandex.ru/d/3Y1rogh78wVtAw)")
    choice = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ").strip()
    if choice == '1':
        if not os.path.exists(local_path):
            print(f"–§–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ products.csv –≤ –ø–∞–ø–∫—É data.")
            exit(1)
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ {local_path}")
        return pd.read_csv(local_path)
    elif choice == '2':
        print("–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...")
        download_yadisk_file('https://disk.yandex.ru/d/3Y1rogh78wVtAw', local_path)
        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {local_path}")
        return pd.read_csv(local_path)
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1)

def get_product_info(query, df):
    """
    –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ –Ω–µ—á—ë—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    
    –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞:
    1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∏—â–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (–Ω–æ—É—Ç–±—É–∫ -> laptop, –Ω–∞—É—à–Ω–∏–∫–∏ -> headphone)
    
    Args:
        query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        df (pandas.DataFrame): –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        dict or None: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    import re
    
    # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    # –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∑–∫–∏–º–∏ –ø–æ —Å–º—ã—Å–ª—É —Ç–µ—Ä–º–∏–Ω–∞–º–∏
    synonyms = {
        '–Ω–æ—É—Ç–±—É–∫': ['laptop', 'notebook', '–Ω–æ—É—Ç–±—É–∫'],
        '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphone', 'earphone', 'earbud', '–Ω–∞—É—à–Ω–∏–∫–∏'],
        '–∫–æ–ª–æ–Ω–∫–∞': ['speaker', '–∫–æ–ª–æ–Ω–∫–∞'],
        '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
        '–∫–∞–º–µ—Ä–∞': ['camera', '–∫–∞–º–µ—Ä–∞'],
        '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad', '–ø–ª–∞–Ω—à–µ—Ç'],
    }
    
    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
    name_col = None
    possible_names = ['name', 'title', 'product', 'description', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
    
    for col in df.columns:
        col_lower = str(col).lower()
        for possible in possible_names:
            if possible in col_lower:
                name_col = col
                break
        if name_col:
            break
    
    # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É (–∫—Ä–æ–º–µ ID)
    if not name_col:
        for col in df.columns:
            if df[col].dtype == 'object' and col.lower() != 'id':
                name_col = col
                break
    
    # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
    if not name_col:
        name_col = df.columns[0]
    
    print(f"üîç –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ: '{name_col}'")
    
    # –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (case-insensitive)
    row = df[df[name_col].astype(str).str.lower() == query.lower()]
    if not row.empty:
        return row.iloc[0].to_dict()
    
    # –®–∞–≥ 2: –°–±–æ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
    # –í–∫–ª—é—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ + –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã
    search_keywords = []
    keywords = query.lower().split()
    
    for keyword in keywords:
        search_keywords.append(keyword)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if keyword in synonyms:
            search_keywords.extend(synonyms[keyword])
    
    # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º regex
    for keyword in search_keywords:
        if len(keyword) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ (–ø—Ä–µ–¥–ª–æ–≥–∏, –∞—Ä—Ç–∏–∫–ª–∏)
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã regex –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            escaped_keyword = re.escape(keyword)
            try:
                matches = df[df[name_col].astype(str).str.lower().str.contains(escaped_keyword, na=False, regex=True)]
                if not matches.empty:
                    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}'.")
                    print(f"üì¶ –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {matches.iloc[0][name_col]}")
                    return matches.iloc[0].to_dict()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É '{keyword}': {e}")
                continue
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"\n‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
    print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: laptop, speaker, camera, headphone, phone, tablet")
    print(f"üìã –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–ø–æ–∫–∞–∂–∏ 10 —Ç–æ–≤–∞—Ä–æ–≤' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞")
    return None

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞)
    - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É ("–ø–æ–∫–∞–∂–∏ 10 —Ç–æ–≤–∞—Ä–æ–≤")
    - –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ GigaChat
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
    - Retry –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (3 –ø–æ–ø—ã—Ç–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ 3, 6, 9 —Å–µ–∫)
    
    –ö–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞: 'exit', '–≤—ã—Ö–æ–¥', 'quit', 'q' –∏–ª–∏ –¥–≤–æ–π–Ω–æ–π Enter
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
    products_df = load_products()
    print("\n–ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    print(products_df.head())
    print("\n=== –ö–æ–ª–æ–Ω–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ===")
    print(products_df.columns.tolist())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    name_columns = [col for col in products_df.columns if any(word in str(col).lower() for word in ['name', 'title', 'product', 'description', '–Ω–∞–∑–≤–∞–Ω–∏–µ'])]
    if name_columns:
        print(f"\n=== –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {name_columns} ===")
        print(f"–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{name_columns[0]}':")
        print(products_df[name_columns[0]].head())
    else:
        print("\n‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞.")
        print(f"–ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: {products_df.columns[0]}")
        print(products_df[products_df.columns[0]].head())

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    with open(os.path.join(os.path.dirname(__file__), '..', 'prompts', 'system_prompt.txt'), encoding='utf-8') as f:
        prompt_template = f.read()

    # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–µ
    prompt = PromptTemplate(
        input_variables=["user_input", "product_data"],
        template=prompt_template
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat LLM —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env
    llm = GigaChat(
        credentials=GIGACHAT_API_KEY,
        model=GIGACHAT_MODEL,
        scope=GIGACHAT_SCOPE,
        temperature=GIGACHAT_TEMPERATURE,  # 0.2 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        top_p=GIGACHAT_TOP_P,  # 1.0 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        profanity_check=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
        verify_ssl_certs=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è dev-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        streaming=False,  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Ü–µ–ª–∏–∫–æ–º
        timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–æ 120 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    )
    # –°–æ–∑–¥–∞–Ω–∏–µ LangChain —Ü–µ–ø–æ—á–∫–∏ (LLM + Prompt)
    # return_final_only=False –Ω—É–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
    chain = LLMChain(llm=llm, prompt=prompt, return_final_only=False)

    print("\n=== –î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤ ===")
    print("(–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit', '–≤—ã—Ö–æ–¥' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter 2 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥)\n")
    
    empty_input_count = 0  # –°—á—ë—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ Enter
    while True:
        user_input = input("User: ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞ - –≤—ã—Ö–æ–¥ –ø–æ—Å–ª–µ –¥–≤–æ–π–Ω–æ–≥–æ Enter
        if not user_input.strip():
            empty_input_count += 1
            if empty_input_count >= 2:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            print("(–ù–∞–∂–º–∏—Ç–µ Enter –µ—â—ë —Ä–∞–∑ –¥–ª—è –≤—ã—Ö–æ–¥–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å)")
            continue
        
        empty_input_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—ã—Ö–æ–¥–∞
        if user_input.strip().lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit', 'q']:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–ø–æ–∫–∞–∂–∏ 10 —Ç–æ–≤–∞—Ä–æ–≤", "—Å–ø–∏—Å–æ–∫", "–¥–∞–π –ø–µ—Ä–≤—ã–µ 5", "–≤—ã–≤–µ–¥–∏ –ø–µ—Ä–≤—ã–µ 5 –Ω–æ—É—Ç–±—É–∫–æ–≤"
        list_keywords = ['—Å–ø–∏—Å–æ–∫', '–ø–æ–∫–∞–∂–∏', '–¥–∞–π', '–≤—ã–≤–µ–¥–∏', '–ø–µ—Ä–≤—ã–µ', '–≤—Å–µ']
        if any(word in user_input.lower() for word in list_keywords):
            import re
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            numbers = re.findall(r'\d+', user_input)
            count = int(numbers[0]) if numbers else 5
            count = min(count, 20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤
            # –ù–∞–ø—Ä–∏–º–µ—Ä: "–≤—ã–≤–µ–¥–∏ 5 –Ω–æ—É—Ç–±—É–∫–æ–≤", "–ø–æ–∫–∞–∂–∏ –Ω–∞—É—à–Ω–∏–∫–∏"
            name_col = 'name' if 'name' in products_df.columns else products_df.columns[0]
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            synonyms = {
                '–Ω–æ—É—Ç–±—É–∫': ['laptop', 'notebook'],
                '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphone', 'earphone', 'earbud'],
                '–∫–æ–ª–æ–Ω–∫–∞': ['speaker'],
                '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone'],
                '–∫–∞–º–µ—Ä–∞': ['camera'],
                '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad']
            }
            
            # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∑–∞–ø—Ä–æ—Å–µ
            category_found = None
            search_keywords = []
            words = user_input.lower().split()
            
            for word in words:
                if word in synonyms:
                    category_found = word
                    search_keywords.extend(synonyms[word])
                    break
            
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞ - —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
            if category_found or search_keywords:
                filtered_df = products_df
                for keyword in search_keywords:
                    matches = filtered_df[filtered_df[name_col].astype(str).str.lower().str.contains(keyword, na=False, regex=False)]
                    if not matches.empty:
                        filtered_df = matches
                        break
                
                if filtered_df.empty or len(filtered_df) == 0:
                    print(f"\n‚ùå –¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")
                    print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: laptop, speaker, camera, headphone, phone –∏ —Ç.–¥.")
                    continue
                
                print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–µ—Ä–≤—ã–µ {min(count, len(filtered_df))}:")
                for idx, row in filtered_df.head(count).iterrows():
                    print(f"{idx+1}. {row[name_col]}")
            else:
                # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞ - –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ N —Ç–æ–≤–∞—Ä–æ–≤
                print(f"\nüìã –í—ã–≤–æ–∂—É –ø–µ—Ä–≤—ã–µ {count} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:")
                for idx, row in products_df.head(count).iterrows():
                    print(f"{idx+1}. {row[name_col]}")
            
            print("\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–æ—É—Ç–±—É–∫', '–Ω–∞—É—à–Ω–∏–∫–∏')")
            continue
        
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        product_info = get_product_info(user_input, products_df)
        if not product_info:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–∂–µ –≤—ã–≤–µ–¥–µ–Ω–æ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_product_info
            continue
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å product_info –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–º–ø—Ç
        product_data_str = "\n".join([f"{k}: {v}" for k, v in product_info.items()])
        
        # ========== RETRY –ú–ï–•–ê–ù–ò–ó–ú ==========
        # –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –¥–µ–ª–∞–µ–º 3 –ø–æ–ø—ã—Ç–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        max_retries = 3
        retry_count = 0
        response = None
        
        while retry_count < max_retries:
            try:
                # –í—ã–∑—ã–≤–∞–µ–º —Ü–µ–ø–æ—á–∫—É LangChain –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
                # return_only_outputs=False –Ω—É–∂–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–æ–∫–µ–Ω—ã)
                response = chain.invoke(
                    {"user_input": user_input, "product_data": product_data_str},
                    return_only_outputs=False
                )
                break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ retry
                
            except Exception as e:
                retry_count += 1
                error_msg = str(e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/—Ç–∞–π–º–∞—É—Ç–∞
                is_connection_error = any(keyword in error_msg.lower() for keyword in [
                    "connection reset", "connecttimeout", "timeout", 
                    "timed out", "handshake", "ssl"
                ])
                
                if is_connection_error:
                    if retry_count < max_retries:
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 3, 6, 9 —Å–µ–∫—É–Ω–¥
                        wait_time = retry_count * 3
                        print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}). –ü–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                        import time
                        time.sleep(wait_time)
                    else:
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        break
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Ç—å—é) - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    break
        
        if response is None:
            continue
            
        # ========== –í–´–í–û–î –†–ï–ó–£–õ–¨–¢–ê–¢–ê ==========
        print("\n‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å:")
        print(user_input)
        print("\n‚Ä¢ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ response (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ 'text' –∏–ª–∏ 'output')
        response_text = response.get('text', response.get('output', ''))
        print(response_text)
        
        # ========== –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –°–¢–†–£–ö–¢–£–†–´ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ==========
        # –í–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DEBUG_TOKENS=true
        if os.getenv('DEBUG_TOKENS', 'false').lower() == 'true':
            print("\n[DEBUG] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:")
            print(f"–ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è: {list(response.keys())}")
            if 'full_generation' in response:
                full_gen = response['full_generation']
                if isinstance(full_gen, list) and len(full_gen) > 0:
                    gen = full_gen[0]
                    print(f"–¢–∏–ø full_generation[0]: {type(gen)}")
                    if hasattr(gen, 'generation_info'):
                        print(f"generation_info: {gen.generation_info}")
                    if hasattr(gen, 'message'):
                        msg = gen.message
                        print(f"–¢–∏–ø message: {type(msg)}")
                        print(f"–ê—Ç—Ä–∏–±—É—Ç—ã message: {[attr for attr in dir(msg) if not attr.startswith('_')]}")
                        if hasattr(msg, 'response_metadata'):
                            print(f"response_metadata: {msg.response_metadata}")
                        if hasattr(msg, 'usage_metadata'):
                            print(f"usage_metadata: {msg.usage_metadata}")
        
        # ========== –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í ==========
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
        token_info_found = False
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: full_generation[0].message.usage_metadata (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è GigaChat)
        # –ó–¥–µ—Å—å GigaChat –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        # {'input_tokens': X, 'output_tokens': Y, 'total_tokens': Z, 'input_token_details': {'cache_read': N}}
        if 'full_generation' in response:
            full_gen = response['full_generation']
            if isinstance(full_gen, list) and len(full_gen) > 0:
                for gen in full_gen:
                    if hasattr(gen, 'message') and hasattr(gen.message, 'usage_metadata'):
                        usage = gen.message.usage_metadata
                        if usage:
                            print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                            if isinstance(usage, dict):
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                                input_tokens = usage.get('input_tokens', usage.get('prompt_tokens', 'N/A'))
                                output_tokens = usage.get('output_tokens', usage.get('completion_tokens', 'N/A'))
                                total_tokens = usage.get('total_tokens', 'N/A')
                                print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {input_tokens}")
                                print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {output_tokens}")
                                print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}")
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
                                if 'input_token_details' in usage and 'cache_read' in usage['input_token_details']:
                                    cache_read = usage['input_token_details']['cache_read']
                                    if cache_read > 0:
                                        print(f"  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {cache_read}")
                            else:
                                # –ï—Å–ª–∏ usage - –æ–±—ä–µ–∫—Ç, –ø–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                                input_tokens = getattr(usage, 'input_tokens', None) or getattr(usage, 'prompt_tokens', None)
                                output_tokens = getattr(usage, 'output_tokens', None) or getattr(usage, 'completion_tokens', None)
                                total_tokens = getattr(usage, 'total_tokens', None)
                                print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {input_tokens or 'N/A'}")
                                print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {output_tokens or 'N/A'}")
                                print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens or 'N/A'}")
                            token_info_found = True
                            break
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: generation_info (fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π LangChain)
        if not token_info_found and 'generation_info' in response:
            gen_info = response['generation_info']
            # generation_info –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º - –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if gen_info and isinstance(gen_info, list) and len(gen_info) > 0:
                gen_info = gen_info[0]
            if gen_info and isinstance(gen_info, dict) and 'usage' in gen_info:
                usage = gen_info['usage']
                print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                token_info_found = True
            
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: llm_output (–µ—â—ë –æ–¥–∏–Ω fallback)
        if not token_info_found and 'llm_output' in response:
            llm_out = response['llm_output']
            if llm_out and 'token_usage' in llm_out:
                usage = llm_out['token_usage']
                print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                token_info_found = True
        
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏–≥–¥–µ - —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not token_info_found:
            print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


if __name__ == "__main__":
    main()
