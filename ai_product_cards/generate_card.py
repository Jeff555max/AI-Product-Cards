
import os
import pandas as pd
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_gigachat.chat_models import GigaChat
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

GIGACHAT_API_KEY = os.getenv("GIGACHAT_API_KEY")
GIGACHAT_CLIENT_ID = os.getenv("GIGACHAT_CLIENT_ID")
GIGACHAT_SCOPE = os.getenv("GIGACHAT_SCOPE")
GIGACHAT_MODEL = os.getenv("GIGACHAT_MODEL", "GigaChat-Pro")
GIGACHAT_TEMPERATURE = float(os.getenv("GIGACHAT_TEMPERATURE", 0.2))
GIGACHAT_TOP_P = float(os.getenv("GIGACHAT_TOP_P", 1))


def download_yadisk_file(yadisk_url, out_path):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å https://cloud-api.yandex.net/v1/disk/public/resources/download
    """
    api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download'
    params = {'public_key': yadisk_url}
    r = requests.get(api_url, params=params)
    r.raise_for_status()
    download_url = r.json()['href']
    with requests.get(download_url, stream=True) as f:
        f.raise_for_status()
        with open(out_path, 'wb') as out_file:
            for chunk in f.iter_content(chunk_size=8192):
                out_file.write(chunk)

def load_products():
    data_dir = os.path.join(os.path.dirname(__file__), '..', 'data')
    os.makedirs(data_dir, exist_ok=True)
    local_path = os.path.join(data_dir, 'products.csv')
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (products.csv –≤ –ø–∞–ø–∫–µ data)")
    print("2. –°–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–µ (https://disk.yandex.ru/d/3Y1rogh78wVtAw)")
    choice = input("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2: ").strip()
    if choice == '1':
        if not os.path.exists(local_path):
            print(f"–§–∞–π–ª {local_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ products.csv –≤ –ø–∞–ø–∫—É data.")
            exit(1)
        print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ {local_path}")
        return pd.read_csv(local_path)
    elif choice == '2':
        print("–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...")
        download_yadisk_file('https://disk.yandex.ru/d/3Y1rogh78wVtAw', local_path)
        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {local_path}")
        return pd.read_csv(local_path)
    else:
        print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        exit(1)

def get_product_info(query, df):
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    """
    import re
    
    # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    synonyms = {
        '–Ω–æ—É—Ç–±—É–∫': ['laptop', 'notebook', '–Ω–æ—É—Ç–±—É–∫'],
        '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphone', 'earphone', 'earbud', '–Ω–∞—É—à–Ω–∏–∫–∏'],
        '–∫–æ–ª–æ–Ω–∫–∞': ['speaker', '–∫–æ–ª–æ–Ω–∫–∞'],
        '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
        '–∫–∞–º–µ—Ä–∞': ['camera', '–∫–∞–º–µ—Ä–∞'],
        '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad', '–ø–ª–∞–Ω—à–µ—Ç'],
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ 'name' (–º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É)
    name_col = None
    possible_names = ['name', 'title', 'product', 'description', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
    
    for col in df.columns:
        col_lower = str(col).lower()
        for possible in possible_names:
            if possible in col_lower:
                name_col = col
                break
        if name_col:
            break
    
    if not name_col:
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É
        for col in df.columns:
            if df[col].dtype == 'object' and col.lower() != 'id':
                name_col = col
                break
    
    if not name_col:
        name_col = df.columns[0]
    
    print(f"üîç –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ: '{name_col}'")
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    row = df[df[name_col].astype(str).str.lower() == query.lower()]
    if not row.empty:
        return row.iloc[0].to_dict()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ + —Å–∏–Ω–æ–Ω–∏–º—ã)
    search_keywords = []
    keywords = query.lower().split()
    
    for keyword in keywords:
        search_keywords.append(keyword)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        if keyword in synonyms:
            search_keywords.extend(synonyms[keyword])
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for keyword in search_keywords:
        if len(keyword) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã regex
            escaped_keyword = re.escape(keyword)
            try:
                matches = df[df[name_col].astype(str).str.lower().str.contains(escaped_keyword, na=False, regex=True)]
                if not matches.empty:
                    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}'.")
                    print(f"üì¶ –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {matches.iloc[0][name_col]}")
                    return matches.iloc[0].to_dict()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–ª–æ–≤—É '{keyword}': {e}")
                continue
    
    print(f"‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
    print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: laptop, speaker, camera, headphone –∏ —Ç.–¥.")
    return None

def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
    products_df = load_products()
    print("\n–ü–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    print(products_df.head())
    print("\n=== –ö–æ–ª–æ–Ω–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ===")
    print(products_df.columns.tolist())
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    name_columns = [col for col in products_df.columns if any(word in str(col).lower() for word in ['name', 'title', 'product', 'description', '–Ω–∞–∑–≤–∞–Ω–∏–µ'])]
    if name_columns:
        print(f"\n=== –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: {name_columns} ===")
        print(f"–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ '{name_columns[0]}':")
        print(products_df[name_columns[0]].head())
    else:
        print("\n‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞.")
        print(f"–ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: {products_df.columns[0]}")
        print(products_df[products_df.columns[0]].head())

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    with open(os.path.join(os.path.dirname(__file__), '..', 'prompts', 'system_prompt.txt'), encoding='utf-8') as f:
        prompt_template = f.read()


    prompt = PromptTemplate(
        input_variables=["user_input", "product_data"],
        template=prompt_template
    )

    llm = GigaChat(
        credentials=GIGACHAT_API_KEY,
        model=GIGACHAT_MODEL,
        scope=GIGACHAT_SCOPE,
        temperature=GIGACHAT_TEMPERATURE,
        top_p=GIGACHAT_TOP_P,
        profanity_check=True,
        verify_ssl_certs=False,
        streaming=False,
        timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–æ 120 —Å–µ–∫—É–Ω–¥
    )
    chain = LLMChain(llm=llm, prompt=prompt, return_final_only=False)

    print("\n=== –î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤ ===")
    print("(–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit', '–≤—ã—Ö–æ–¥' –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter 2 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥)\n")
    
    empty_input_count = 0
    while True:
        user_input = input("User: ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ –≤–≤–æ–¥–∞
        if not user_input.strip():
            empty_input_count += 1
            if empty_input_count >= 2:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            print("(–ù–∞–∂–º–∏—Ç–µ Enter –µ—â—ë —Ä–∞–∑ –¥–ª—è –≤—ã—Ö–æ–¥–∞, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å)")
            continue
        
        empty_input_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ
        
        if user_input.strip().lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit', 'q']:
            print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        if any(word in user_input.lower() for word in ['—Å–ø–∏—Å–æ–∫', '–ø–æ–∫–∞–∂–∏', '–¥–∞–π', '–≤—ã–≤–µ–¥–∏', '–ø–µ—Ä–≤—ã–µ', '–≤—Å–µ']):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
            import re
            numbers = re.findall(r'\d+', user_input)
            count = int(numbers[0]) if numbers else 5
            count = min(count, 20)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 —Ç–æ–≤–∞—Ä–æ–≤
            
            print(f"\nüìã –í—ã–≤–æ–∂—É –ø–µ—Ä–≤—ã–µ {count} —Ç–æ–≤–∞—Ä–æ–≤:")
            name_col = 'name' if 'name' in products_df.columns else products_df.columns[0]
            for idx, row in products_df.head(count).iterrows():
                print(f"{idx+1}. {row[name_col]}")
            print("\n–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–æ—É—Ç–±—É–∫', '–Ω–∞—É—à–Ω–∏–∫–∏')")
            continue
        
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        product_info = get_product_info(user_input, products_df)
        if not product_info:
            print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            continue
        product_data_str = "\n".join([f"{k}: {v}" for k, v in product_info.items()])
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        max_retries = 3
        retry_count = 0
        response = None
        
        while retry_count < max_retries:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º invoke –¥–ª—è –≤—ã–∑–æ–≤–∞ chain
                response = chain.invoke(
                    {"user_input": user_input, "product_data": product_data_str},
                    return_only_outputs=False
                )
                break  # –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                
            except Exception as e:
                retry_count += 1
                error_msg = str(e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ç–∞–π–º–∞—É—Ç–∞
                is_connection_error = any(keyword in error_msg.lower() for keyword in [
                    "connection reset", "connecttimeout", "timeout", 
                    "timed out", "handshake", "ssl"
                ])
                
                if is_connection_error:
                    if retry_count < max_retries:
                        wait_time = retry_count * 3  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π: 3, 6, 9 —Å–µ–∫
                        print(f"\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}). –ü–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫...")
                        import time
                        time.sleep(wait_time)
                    else:
                        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                        break
                else:
                    # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    break
        
        if response is None:
            continue
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        print("\n‚Ä¢ –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å:")
        print(user_input)
        print("\n‚Ä¢ –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = response.get('text', response.get('output', ''))
        print(response_text)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç
        token_info_found = False
        
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –∏–∑ generation_info
        if 'generation_info' in response:
            gen_info = response['generation_info']
            if gen_info and isinstance(gen_info, list) and len(gen_info) > 0:
                gen_info = gen_info[0]
            if gen_info and isinstance(gen_info, dict) and 'usage' in gen_info:
                usage = gen_info['usage']
                print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                token_info_found = True
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –∏–∑ llm_output (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if not token_info_found and 'llm_output' in response:
                llm_out = response['llm_output']
                if llm_out and 'token_usage' in llm_out:
                    usage = llm_out['token_usage']
                    print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                    print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                    print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                    print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                    token_info_found = True
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –∏–∑ full_generation (–¥–ª—è GigaChat)
            if not token_info_found and 'full_generation' in response:
                full_gen = response['full_generation']
                if isinstance(full_gen, list) and len(full_gen) > 0:
                    gen = full_gen[0]
                    if hasattr(gen, 'generation_info') and gen.generation_info:
                        if 'usage' in gen.generation_info:
                            usage = gen.generation_info['usage']
                            print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                            print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                            print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                            print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                            token_info_found = True
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –æ—Ç–ª–∞–¥–∫—É
            if not token_info_found:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ full_generation –¥–µ—Ç–∞–ª—å–Ω–æ
                if 'full_generation' in response:
                    full_gen = response['full_generation']
                    if isinstance(full_gen, list) and len(full_gen) > 0:
                        gen = full_gen[0]
                        # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:")
                        if hasattr(gen, 'generation_info'):
                            gen_info = gen.generation_info
                            if isinstance(gen_info, dict):
                                if 'usage' in gen_info:
                                    usage = gen_info['usage']
                                    print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                                    print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                                    print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                                    token_info_found = True
                                elif 'token_usage' in gen_info:
                                    usage = gen_info['token_usage']
                                    print(f"  –í—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (prompt): {usage.get('prompt_tokens', 'N/A')}")
                                    print(f"  –í—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (completion): {usage.get('completion_tokens', 'N/A')}")
                                    print(f"  –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 'N/A')}")
                                    token_info_found = True
                                else:
                                    print(f"  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–ª—é—á–∏ –≤ generation_info: {list(gen_info.keys())})")
                        
                        if not token_info_found:
                            print("  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    print("\n‚Ä¢ üí∞ –†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


if __name__ == "__main__":
    main()
