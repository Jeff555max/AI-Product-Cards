"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–∑ generate_card.py
"""

import os
import re
import pandas as pd
import requests
from typing import Optional, Dict, List


def download_yadisk_file(yadisk_url: str, out_path: str) -> None:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ.
    
    Args:
        yadisk_url: –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª
        out_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    api_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download'
    params = {'public_key': yadisk_url}
    r = requests.get(api_url, params=params)
    r.raise_for_status()
    download_url = r.json()['href']
    
    with requests.get(download_url, stream=True) as f:
        f.raise_for_status()
        with open(out_path, 'wb') as out_file:
            for chunk in f.iter_content(chunk_size=8192):
                out_file.write(chunk)


def load_products(data_dir: str, force_download: bool = False) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.
    
    Args:
        data_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        force_download: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        
    Returns:
        DataFrame —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    """
    os.makedirs(data_dir, exist_ok=True)
    local_path = os.path.join(data_dir, 'products.csv')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(local_path) or force_download:
        print("üì• –°–∫–∞—á–∏–≤–∞—é –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞...")
        download_yadisk_file(
            'https://disk.yandex.ru/d/3Y1rogh78wVtAw',
            local_path
        )
        print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {local_path}")
    else:
        print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {local_path}")
    
    return pd.read_csv(local_path)


def get_product_info(query: str, df: pd.DataFrame) -> Optional[Dict]:
    """
    –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        df: DataFrame —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ None
    """
    # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    synonyms = {
        '–Ω–æ—É—Ç–±—É–∫': ['laptop', 'notebook', '–Ω–æ—É—Ç–±—É–∫'],
        '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphone', 'earphone', 'earbud', '–Ω–∞—É—à–Ω–∏–∫–∏'],
        '–∫–æ–ª–æ–Ω–∫–∞': ['speaker', '–∫–æ–ª–æ–Ω–∫–∞'],
        '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone', '—Ç–µ–ª–µ—Ñ–æ–Ω'],
        '–∫–∞–º–µ—Ä–∞': ['camera', '–∫–∞–º–µ—Ä–∞'],
        '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad', '–ø–ª–∞–Ω—à–µ—Ç'],
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
    name_col = None
    possible_names = ['name', 'title', 'product', 'description', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
    
    for col in df.columns:
        col_lower = str(col).lower()
        for possible in possible_names:
            if possible in col_lower:
                name_col = col
                break
        if name_col:
            break
    
    if not name_col:
        for col in df.columns:
            if df[col].dtype == 'object' and col.lower() != 'id':
                name_col = col
                break
    
    if not name_col:
        name_col = df.columns[0]
    
    # –®–∞–≥ 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    row = df[df[name_col].astype(str).str.lower() == query.lower()]
    if not row.empty:
        return row.iloc[0].to_dict()
    
    # –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    search_keywords = []
    keywords = query.lower().split()
    
    for keyword in keywords:
        search_keywords.append(keyword)
        if keyword in synonyms:
            search_keywords.extend(synonyms[keyword])
    
    # –®–∞–≥ 3: Regex –ø–æ–∏—Å–∫
    for keyword in search_keywords:
        if len(keyword) > 2:
            escaped_keyword = re.escape(keyword)
            try:
                matches = df[df[name_col].astype(str).str.lower().str.contains(
                    escaped_keyword, na=False, regex=True
                )]
                if not matches.empty:
                    return matches.iloc[0].to_dict()
            except Exception:
                continue
    
    return None


def search_products(query: str, df: pd.DataFrame, limit: int = 10) -> List[Dict]:
    """
    –ü–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    Args:
        query: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        df: DataFrame —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    """
    synonyms = {
        '–Ω–æ—É—Ç–±—É–∫': ['laptop', 'notebook'],
        '–Ω–∞—É—à–Ω–∏–∫–∏': ['headphone', 'earphone', 'earbud'],
        '–∫–æ–ª–æ–Ω–∫–∞': ['speaker'],
        '—Ç–µ–ª–µ—Ñ–æ–Ω': ['phone', 'smartphone'],
        '–∫–∞–º–µ—Ä–∞': ['camera'],
        '–ø–ª–∞–Ω—à–µ—Ç': ['tablet', 'ipad']
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
    name_col = 'name' if 'name' in df.columns else df.columns[0]
    
    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    search_keywords = []
    for key, values in synonyms.items():
        if key in query.lower():
            search_keywords.extend(values)
            break
    
    if not search_keywords:
        search_keywords = query.lower().split()
    
    # –ü–æ–∏—Å–∫
    results = []
    for keyword in search_keywords:
        if len(keyword) > 2:
            escaped_keyword = re.escape(keyword)
            try:
                matches = df[df[name_col].astype(str).str.lower().str.contains(
                    escaped_keyword, na=False, regex=False
                )]
                if not matches.empty:
                    results = matches.head(limit).to_dict('records')
                    break
            except Exception:
                continue
    
    return results


def format_product_data(product_info: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞.
    
    Args:
        product_info: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    return "\n".join([f"{k}: {v}" for k, v in product_info.items()])
