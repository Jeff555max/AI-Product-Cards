"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞
"""

import telebot
from telebot import types
from typing import Optional

from .config import config
from .utils import get_product_info, search_products, format_product_data
from .gigachat_service import GigaChatService


class BotHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    def __init__(self, bot: telebot.TeleBot, products_df, gigachat_service: GigaChatService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
            products_df: DataFrame —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤
            gigachat_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat
        """
        self.bot = bot
        self.products_df = products_df
        self.gigachat = gigachat_service
        self._register_handlers()
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.bot.message_handler(commands=['start'])(self.cmd_start)
        self.bot.message_handler(commands=['help'])(self.cmd_help)
        self.bot.message_handler(commands=['info'])(self.cmd_info)
        self.bot.message_handler(commands=['list'])(self.cmd_list)
        self.bot.message_handler(func=lambda message: True)(self.handle_text)
    
    def cmd_start(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Product Cards Bot!</b>

–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
‚Ä¢ "–Ω–∞—É—à–Ω–∏–∫–∏"
‚Ä¢ "laptop"
‚Ä¢ "Sony Speaker"

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/list - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
/help - —Å–ø—Ä–∞–≤–∫–∞
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
        """
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
            types.KeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"),
            types.KeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏"),
            types.KeyboardButton("üíª –ù–æ—É—Ç–±—É–∫–∏")
        )
        
        self.bot.send_message(
            message.chat.id,
            welcome_text,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def cmd_help(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

<b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
‚Ä¢ "–Ω–∞—É—à–Ω–∏–∫–∏" - –Ω–∞–π–¥—ë—Ç –≤—Å–µ –Ω–∞—É—à–Ω–∏–∫–∏
‚Ä¢ "Sony Speaker" - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
‚Ä¢ "laptop" - –Ω–∞–π–¥—ë—Ç –Ω–æ—É—Ç–±—É–∫–∏

<b>–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:</b>
–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:
‚Ä¢ "–≤—ã–≤–µ–¥–∏ 5 –Ω–æ—É—Ç–±—É–∫–æ–≤"
‚Ä¢ "–ø–æ–∫–∞–∂–∏ 15 –Ω–∞—É—à–Ω–∏–∫–æ–≤"
‚Ä¢ "–ø–µ—Ä–≤—ã—Ö 20 laptop"
‚Ä¢ "—Å–ø–∏—Å–æ–∫ 10 –∫–æ–ª–æ–Ω–æ–∫"

<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:</b>
–ü–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–º –∫–∞—Ä—Ç–æ—á–∫—É —Å:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –ö—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ –ü–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
‚Ä¢ SEO-–∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/list - –ø–æ–∫–∞–∑–∞—Ç—å 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ

<b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ GigaChat {model} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥: {products_count} —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ Langfuse —Ç—Ä–µ–π—Å–∏–Ω–≥: {langfuse_status}

üí° –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
        """.format(
            model=config.GIGACHAT_MODEL,
            products_count=len(self.products_df),
            langfuse_status="‚úÖ" if config.ENABLE_LANGFUSE else "‚ùå"
        )
        
        self.bot.send_message(message.chat.id, help_text, parse_mode='HTML')
    
    def cmd_info(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
        info_text = f"""
ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
‚Ä¢ –ú–æ–¥–µ–ª—å: {config.GIGACHAT_MODEL}
‚Ä¢ Temperature: {config.GIGACHAT_TEMPERATURE}
‚Ä¢ Top-p: {config.GIGACHAT_TOP_P}
‚Ä¢ Langfuse: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if config.ENABLE_LANGFUSE else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

<b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(self.products_df)}
‚Ä¢ –ö–æ–ª–æ–Ω–æ–∫ –¥–∞–Ω–Ω—ã—Ö: {len(self.products_df.columns)}
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ~{len(self.products_df) * len(self.products_df.columns) // 1000} KB

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
‚úÖ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤

<b>–í–µ—Ä—Å–∏—è:</b> 1.0.0
<b>GitHub:</b> Jeff555max/AI-Product-Cards
        """
        
        self.bot.send_message(message.chat.id, info_text, parse_mode='HTML')
    
    def cmd_list(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            sample_products = self.products_df.sample(
                min(config.MAX_PRODUCTS_DISPLAY, len(self.products_df))
            )
            
            name_col = 'name' if 'name' in self.products_df.columns else self.products_df.columns[0]
            
            products_list = "\n".join([
                f"{idx + 1}. {row[name_col]}"
                for idx, (_, row) in enumerate(sample_products.iterrows())
            ])
            
            response = f"""
üìã <b>–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:</b>

{products_list}

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!
            """
            
            self.bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞: {str(e)}"
            )
    
    def handle_text(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_input = message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if user_input == "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤":
            self.show_random_products(message, limit=10)
            return
        elif user_input == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
            self.cmd_help(message)
            return
        elif user_input == "üîç –°–æ–∑–¥–∞—Ç—å –µ—â—ë –∫–∞—Ä—Ç–æ—á–∫—É":
            self.bot.send_message(
                message.chat.id,
                "‚úèÔ∏è <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n‚Ä¢ –Ω–∞—É—à–Ω–∏–∫–∏\n‚Ä¢ laptop\n‚Ä¢ Sony Speaker",
                parse_mode='HTML'
            )
            return
        elif user_input == "üéß –ù–∞—É—à–Ω–∏–∫–∏":
            self.show_category_products(message, "–Ω–∞—É—à–Ω–∏–∫–∏", "üéß –ù–∞—É—à–Ω–∏–∫–∏")
            return
        elif user_input == "üíª –ù–æ—É—Ç–±—É–∫–∏":
            self.show_category_products(message, "–Ω–æ—É—Ç–±—É–∫", "üíª –ù–æ—É—Ç–±—É–∫–∏")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≤—ã–≤–µ–¥–∏ 5 –Ω–æ—É—Ç–±—É–∫–æ–≤", "–ø–æ–∫–∞–∂–∏ 15 –Ω–∞—É—à–Ω–∏–∫–æ–≤")
        parsed_command = self.parse_quantity_command(user_input)
        if parsed_command:
            quantity, category, category_title = parsed_command
            self.show_category_products(message, category, category_title, limit=quantity)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        self.bot.send_chat_action(message.chat.id, 'typing')
        
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
        self.bot.send_message(message.chat.id, "üîç –ò—â—É —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ...")
        
        product_info = get_product_info(user_input, self.products_df)
        
        if not product_info:
            # –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ
            self.handle_not_found(message, user_input)
            return
        
        # –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        name_col = 'name' if 'name' in self.products_df.columns else self.products_df.columns[0]
        product_name = product_info.get(name_col, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        
        self.bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: <b>{product_name}</b>\n\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É...",
            parse_mode='HTML'
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        self.generate_and_send_card(message, user_input, product_info)
    
    def parse_quantity_command(self, text: str):
        """
        –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞: "–≤—ã–≤–µ–¥–∏ 5 –Ω–æ—É—Ç–±—É–∫–æ–≤", "–ø–æ–∫–∞–∂–∏ 15 –Ω–∞—É—à–Ω–∏–∫–æ–≤", "–ø–µ—Ä–≤—ã—Ö 10 laptop"
        
        Returns:
            Tuple (quantity, category, category_title) –∏–ª–∏ None
        """
        import re
        
        text_lower = text.lower()
        
        # –°–ª–æ–≤–∞—Ä—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        categories = {
            '–Ω–æ—É—Ç–±—É–∫': ('–Ω–æ—É—Ç–±—É–∫', 'üíª –ù–æ—É—Ç–±—É–∫–∏'),
            '–Ω–æ—É—Ç–±—É–∫–æ–≤': ('–Ω–æ—É—Ç–±—É–∫', 'üíª –ù–æ—É—Ç–±—É–∫–∏'),
            '–Ω–æ—É—Ç–±—É–∫–∞': ('–Ω–æ—É—Ç–±—É–∫', 'üíª –ù–æ—É—Ç–±—É–∫–∏'),
            '–Ω–æ—É—Ç–±—É–∫–∏': ('–Ω–æ—É—Ç–±—É–∫', 'üíª –ù–æ—É—Ç–±—É–∫–∏'),
            'laptop': ('–Ω–æ—É—Ç–±—É–∫', 'üíª Laptops'),
            'laptops': ('–Ω–æ—É—Ç–±—É–∫', 'üíª Laptops'),
            'notebook': ('–Ω–æ—É—Ç–±—É–∫', 'üíª Notebooks'),
            'notebooks': ('–Ω–æ—É—Ç–±—É–∫', 'üíª Notebooks'),
            '–Ω–∞—É—à–Ω–∏–∫–∏': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß –ù–∞—É—à–Ω–∏–∫–∏'),
            '–Ω–∞—É—à–Ω–∏–∫': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß –ù–∞—É—à–Ω–∏–∫–∏'),
            '–Ω–∞—É—à–Ω–∏–∫–æ–≤': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß –ù–∞—É—à–Ω–∏–∫–∏'),
            '–Ω–∞—É—à–Ω–∏–∫–∞': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß –ù–∞—É—à–Ω–∏–∫–∏'),
            'headphone': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Headphones'),
            'headphones': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Headphones'),
            'earphone': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Earphones'),
            'earphones': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Earphones'),
            'earbud': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Earbuds'),
            'earbuds': ('–Ω–∞—É—à–Ω–∏–∫–∏', 'üéß Earbuds'),
            '–∫–æ–ª–æ–Ω–∫–∞': ('–∫–æ–ª–æ–Ω–∫–∞', 'üîä –ö–æ–ª–æ–Ω–∫–∏'),
            '–∫–æ–ª–æ–Ω–∫–∏': ('–∫–æ–ª–æ–Ω–∫–∞', 'üîä –ö–æ–ª–æ–Ω–∫–∏'),
            '–∫–æ–ª–æ–Ω–æ–∫': ('–∫–æ–ª–æ–Ω–∫–∞', 'üîä –ö–æ–ª–æ–Ω–∫–∏'),
            'speaker': ('–∫–æ–ª–æ–Ω–∫–∞', 'üîä Speakers'),
            'speakers': ('–∫–æ–ª–æ–Ω–∫–∞', 'üîä Speakers'),
            '—Ç–µ–ª–µ—Ñ–æ–Ω': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã'),
            '—Ç–µ–ª–µ—Ñ–æ–Ω–∞': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã'),
            '—Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã'),
            'phone': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± Phones'),
            'phones': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± Phones'),
            'smartphone': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± Smartphones'),
            'smartphones': ('—Ç–µ–ª–µ—Ñ–æ–Ω', 'üì± Smartphones'),
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        patterns = [
            r'–≤—ã–≤–µ–¥–∏\s+(\d+)\s+(\w+)',  # "–≤—ã–≤–µ–¥–∏ 10 –Ω–∞—É—à–Ω–∏–∫–æ–≤"
            r'–ø–æ–∫–∞–∂–∏\s+(\d+)\s+(\w+)',  # "–ø–æ–∫–∞–∂–∏ 15 laptop"
            r'–ø–µ—Ä–≤—ã—Ö\s+(\d+)\s+(\w+)',  # "–ø–µ—Ä–≤—ã—Ö 5 –Ω–æ—É—Ç–±—É–∫–æ–≤"
            r'—Å–ø–∏—Å–æ–∫\s+(\d+)\s+(\w+)',  # "—Å–ø–∏—Å–æ–∫ 20 —Ç–æ–≤–∞—Ä–æ–≤"
            r'(\d+)\s+(\w+)',  # "5 –Ω–æ—É—Ç–±—É–∫–æ–≤", "10 –Ω–∞—É—à–Ω–∏–∫–æ–≤"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text_lower)
            if match:
                quantity = int(match.group(1))
                category_word = match.group(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                if category_word in categories:
                    cat, title = categories[category_word]
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    quantity = min(quantity, 50)
                    return (quantity, cat, title)
        
        return None
    
    def show_random_products(self, message, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—Å–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            sample_products = self.products_df.sample(min(limit, len(self.products_df)))
            
            name_col = 'name' if 'name' in self.products_df.columns else self.products_df.columns[0]
            
            products_list = "\n".join([
                f"{idx + 1}. {row[name_col]}"
                for idx, (_, row) in enumerate(sample_products.iterrows())
            ])
            
            response = f"""
üìã <b>–°–ª—É—á–∞–π–Ω—ã–µ {limit} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:</b>

{products_list}

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏!
            """
            
            self.bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞: {str(e)}"
            )
    
    def show_category_products(self, message, category: str, category_title: str, limit: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_products = search_products(category, self.products_df, limit=100)
            
            if not category_products:
                self.bot.send_message(
                    message.chat.id,
                    f"‚ùå –¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_title}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )
                return
            
            # –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            import random
            selected = random.sample(category_products, min(limit, len(category_products)))
            
            name_col = 'name' if 'name' in self.products_df.columns else self.products_df.columns[0]
            
            products_list = "\n".join([
                f"{idx + 1}. {item.get(name_col, 'N/A')}"
                for idx, item in enumerate(selected)
            ])
            
            response = f"""
{category_title} - <b>–°–ª—É—á–∞–π–Ω—ã–µ {len(selected)} —Ç–æ–≤–∞—Ä–æ–≤:</b>

{products_list}

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏!
            """
            
            self.bot.send_message(message.chat.id, response, parse_mode='HTML')
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}"
            )
    
    def handle_not_found(self, message, query: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"""
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
        similar = search_products(query, self.products_df, limit=5)
        
        if similar:
            name_col = 'name' if 'name' in self.products_df.columns else self.products_df.columns[0]
            similar_list = "\n".join([
                f"{idx + 1}. {item.get(name_col, 'N/A')}"
                for idx, item in enumerate(similar)
            ])
            
            response = f"""
‚ùå –¢–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.

<b>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:</b>
{similar_list}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å!
            """
        else:
            response = """
‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –Ω–∞—É—à–Ω–∏–∫–∏, –Ω–æ—É—Ç–±—É–∫, –∫–æ–ª–æ–Ω–∫–∞, —Ç–µ–ª–µ—Ñ–æ–Ω

üí° –ü—Ä–∏–º–µ—Ä—ã: "Sony Speaker", "laptop", "headphone"
            """
        
        self.bot.send_message(message.chat.id, response, parse_mode='HTML')
    
    def generate_and_send_card(self, message, user_input: str, product_info: dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            product_data_str = format_product_data(product_info)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            response = self.gigachat.generate_card(user_input, product_data_str)
            
            if not response:
                self.bot.send_message(
                    message.chat.id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            card_text = response.get('text', response.get('output', ''))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
            token_info = self.gigachat.extract_token_info(response)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            final_response = f"""
{card_text}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí∞ <b>–†–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤:</b>
‚Ä¢ –í—Ö–æ–¥–Ω—ã—Ö: {token_info['input_tokens']}
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã—Ö: {token_info['output_tokens']}
‚Ä¢ –í—Å–µ–≥–æ: {token_info['total_tokens']}
            """
            
            if token_info['cached_tokens'] > 0:
                final_response += f"\n‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {token_info['cached_tokens']}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É (—Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è)
            self.send_long_message(message.chat.id, final_response)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
            self.prompt_continue(message.chat.id)
            
        except Exception as e:
            self.bot.send_message(
                message.chat.id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            )
    
    def prompt_continue(self, chat_id: int):
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
        """
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("üîç –°–æ–∑–¥–∞—Ç—å –µ—â—ë –∫–∞—Ä—Ç–æ—á–∫—É"),
            types.KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
            types.KeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏"),
            types.KeyboardButton("üíª –ù–æ—É—Ç–±—É–∫–∏"),
            types.KeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"),
        )
        
        continue_message = """
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞!</b>

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ üîç –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ üìã –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

üí° –ù–∞–ø—Ä–∏–º–µ—Ä: "Sony Speaker", "laptop", "–∫–æ–ª–æ–Ω–∫–∞"
        """
        
        self.bot.send_message(
            chat_id,
            continue_message,
            parse_mode='HTML',
            reply_markup=markup
        )
    
    def send_long_message(self, chat_id: int, text: str, max_length: int = 4096):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π.
        
        Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤.
        """
        if len(text) <= max_length:
            self.bot.send_message(chat_id, text, parse_mode='HTML')
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [text[i:i + max_length] for i in range(0, len(text), max_length)]
            for part in parts:
                self.bot.send_message(chat_id, part, parse_mode='HTML')
